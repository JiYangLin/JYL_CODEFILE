ESC - quit the program
r - auto-initialize tracking
c - delete all the points
n - switch the "night" mode on/off


运行流程：从计算机摄像头中获取视频，起初不做任何分析。按“r”后，初始化，显示所获取的特征点。视频显示时，可以用鼠标任意添加和去除特征点；当视频中的物体运动时，特征点也会随之运动

1)特征点的获取（也可以不使用该函数进行自动检测，而使用任意点）
cvGoodFeaturesToTrack提取出图像image中的规定上限个数的特征点（在本例中，上限为500)，然后放于数组points[1]中。

2)特征点的处理
cvFindCornerSubPix将points[1]中的点作精确处理。如果点不是特征点，则cvCalcOpticalFlowPyrLK处理后对应该点的status为0


3)特征点跟踪
cvCalcOpticalFlowPyrLK函数将前后变量进行比较，并将特征点跟踪的后结果放在第6个参数points[1]和第10个参数status中


4)点由画圆函数实现： cvCircle( image, cvPointFrom32f(points[1][i]), 3, CV_RGB(0,255,0), -1, 8,0)。





cvCalcOpticalFlowPyrLK( const CvArr* prev, const CvArr* curr, CvArr* prev_pyr,CvArr* curr_pyr,
              const CvPoint2D32f* prev_features, CvPoint2D32f* curr_features,
              int count, CvSize win_size, int level, char* status,
              float* track_error, CvTermCriteria criteria, int flags );
实现了特征点的跟踪


prev      前一帧 
curr      当前帧 
prev_pyr  前一帧的金字塔缓存 
curr_pyr  当前帧的金字塔缓存 
prev_features 需要发现光流的点集 
curr_features 包含新计算出来的位置的点集 
count     特征点的数目 
win_size 每个金字塔层的搜索窗口尺寸       
level    最大的金字塔层数。 
status   数组，如果对应特征的光流被发现，数组中的每一个元素都被设置为 1， 否则设置为 0 
error    双精度数组，包含原始图像碎片与移动点之间的差，为可选参数，可以是 NULL 
criteria 准则，指定在每个金字塔层，为某点寻找光流的迭代过程的终止条件 
flags 其它选项： 
CV_LKFLOW_PYR_A_READY , 在调用之前，第一帧的金字塔已经准备好 
CV_LKFLOW_PYR_B_READY , 在调用之前，第二帧的金字塔已经准备好 
CV_LKFLOW_INITIAL_GUESSES , 在调用之前，数组 B 包含特征的初始坐标 
函数 cvCalcOpticalFlowPyrLK 实现了金字塔中 Lucas-Kanade 光流计算的稀疏迭代版本 ([Bouguet00])。它根据给出的前一帧特征点坐标计算当前视频帧上的特征点坐标。函数寻找具有子象素精度的坐标值。

两个参数 prev_pyr 和 curr_pyr 都遵循下列规则： 如果图像指针为 0, 函数在内部为其分配缓存空间，计算金字塔，然后再处理过后释放缓存。否则，函数计算金字塔且存储它到缓存中，除非设置标识CV_LKFLOW_PYR_A[B]_READY 。 图像应该足够大以便能够容纳 Gaussian 金字塔数据。调用函数以后，金字塔被计算而且相应图像的标识可以被设置，为下一次调用准备就绪 (比如：对除了第一个图像的所有图像序列，标识 CV_LKFLOW_PYR_A_READY 被设置).





void cvGoodFeaturesToTrack( const CvArr* image, CvArr* eig_image, CvArr* temp_image,
                            CvPoint2D32f* corners, int* corner_count,
                            double quality_level, double min_distance,
                            const CvArr* mask=NULL );

image         输入图像，8-位或浮点32-比特，单通道

eig_image     临时浮点32-位图像，尺寸与输入图像一致 
temp_image    另外一个临时图像，格式与尺寸与 eig_image一致 
corners       输出参数，检测到的角点 
corner_count  输出参数，检测到的角点数目 
quality_level 最大最小特征值的乘法因子。定义可接受图像角点的最小质量因子。 
min_distance  限制因子。得到的角点的最小距离。使用 Euclidian 距离 
mask          ROI:感兴趣区域。函数在ROI中计算角点，如果 mask 为 NULL，则选择整个图像。 

函数 cvGoodFeaturesToTrack 在图像中寻找具有大特征值的角点。该函数，首先用cvCornerMinEigenVal 计算输入图像的每一个像素点的最小特征值，并将结果存储到变量 eig_image 中。然后进行非最大值抑制（仅保留3x3邻域中的局部最大值）。下一步将最小特征值小于 quality_level?max(eig_image(x,y)) 排除掉。最后，函数确保所有发现的角点之间具有足够的距离，（最强的角点第一个保留，然后检查新的角点与已有角点之间的距离大于 min_distance ）。






void cvFindCornerSubPix( const CvArr* image, CvPoint2D32f* corners,
                         int count, CvSize win, CvSize zero_zone,
                         CvTermCriteria criteria );
用于发现亚像素精度的角点位置

image         输入图像. 
corners       输入角点的初始坐标，也存储精确的输出坐标 
count         角点数目 
win           搜索窗口的一半尺寸,如果win=（5,5）那么使用（5*2+1）×（5*2+1）=11×11大小的搜索窗口
zero_zone     死区的一半尺寸，死区为不对搜索区的中央位置做求和运算的区域 
criteria      求角点的迭代过程的终止条件。





CV_SWAP用于交换两个变量中的内容
swap(a,b,tmp)
｛
  tmp = a;
  a= b;
  b=tmp;
 ｝

