************************************************
使用时需要将frame的图像调整到需要的大小，否则会出现坐标误差
************************************************


IplImage *image = 0, *grey = 0, *prev_grey = 0, *pyramid = 0, *prev_pyramid = 0, *swap_temp;
const int MAX_COUNT = 500;//表示最多可以追踪多少个点
CvPoint2D32f* points[2] = {0,0}, *swap_points;//两个point指针，分别指向MAX_COUNT个连续的内存空间，其中，point[1]存储当前的点集，point[0]存储上一次的
int count = 0;//表示当前检测到的点的数量
int win_size = 10; //搜索区域方块的宽度
char* status = 0;//指向MAX_COUNT个点的状态，用1，0表示对应特征的光流是否被发现 
int flags = 0;//特征点的跟踪时用来判断的特性
CvPoint pt;//存储鼠标点击时的点


int need_to_init = 0;
int night_mode = 0;
int add_remove_pt = 0;

//////////////////////////////////////////////////////////////////
void on_mouse( int event, int x, int y, int flags, void* param )
{
	if( !image )
		return;

	if( image->origin )
		y = image->height - y;

	if( event == CV_EVENT_LBUTTONDOWN )
	{
		pt = cvPoint(x,y);
		add_remove_pt = 1;
	}
}
////////////////////////////////////////////////////////////////////

============================================================================

//////////////////////////////////////
cvNamedWindow(" ", 0 );
cvSetMouseCallback(" ", on_mouse, 0 );
//////////////////////////////////////

CvCapture* capture = cvCaptureFromCAM(0);
if( !capture )
{
	return 0;
}
while(1)
{
	IplImage* frame = cvQueryFrame( capture );
	if( !frame )
		break;

	if( !image )//一开始的时候image是空的，该if内的初始化只在开始时候运行一次
	{
		image = cvCreateImage( cvGetSize(frame), 8, 3 );
		image->origin = frame->origin;
		grey = cvCreateImage( cvGetSize(frame), 8, 1 );
		prev_grey = cvCreateImage( cvGetSize(frame), 8, 1 );
		pyramid = cvCreateImage( cvGetSize(frame), 8, 1 );
		prev_pyramid = cvCreateImage( cvGetSize(frame), 8, 1 );
		//为两个point指针分别分配MAX_COUNT个点的空间
		points[0] = (CvPoint2D32f*)cvAlloc(MAX_COUNT*sizeof(points[0][0]));
		points[1] = (CvPoint2D32f*)cvAlloc(MAX_COUNT*sizeof(points[0][0]));
		status = (char*)cvAlloc(MAX_COUNT);
		flags = 0;
	}

	cvCopy( frame, image, 0 );
	cvCvtColor( image, grey, CV_BGR2GRAY );

	if( night_mode )//如果是黑夜模式，就将image内存清空，也就是变成黑色
		cvZero( image );

	if( need_to_init )//按下r后，通过查找特征点加入检测点
	{
		IplImage* eig = cvCreateImage( cvGetSize(grey), 32, 1 );
		IplImage* temp = cvCreateImage( cvGetSize(grey), 32, 1 );
		double quality = 0.01;
		double min_distance = 10;

		cvGoodFeaturesToTrack( grey, eig, temp, points[1], &count,quality, min_distance, 0, 3, 0, 0.04 );
		cvFindCornerSubPix( grey, points[1], count,cvSize(win_size,win_size), cvSize(-1,-1),cvTermCriteria(CV_TERMCRIT_ITER|CV_TERMCRIT_EPS,20,0.03));
		cvReleaseImage( &eig );
		cvReleaseImage( &temp );

		add_remove_pt = 0;
		need_to_init = 0;//结束后将判断变量变回0
	}
	else if( count > 0 )//如果不进行init，且存在点，则执行。
	{
		cvCalcOpticalFlowPyrLK( prev_grey, grey, prev_pyramid, pyramid,points[0], points[1], count, cvSize(win_size,win_size), 3, status, 0,cvTermCriteria(CV_TERMCRIT_ITER|CV_TERMCRIT_EPS,20,0.03), flags );
		flags |= CV_LKFLOW_PYR_A_READY;
		
  	        int i, k;	
		for( i = k = 0; i < count; i++ )
		{
			if( add_remove_pt )
			{//找出鼠标点击的点是否在count（这个数量只增加点之前的数量）个点内(附近),如果是，则跳出一次循环，相当于取消一个重复的点，这段代码的目的是查看已有的点中是否和即将要增加的点位置相同
				double dx = pt.x - points[1][i].x;
				double dy = pt.y - points[1][i].y;

				if( dx*dx + dy*dy <= 25 )
				{
					add_remove_pt = 0;
					continue;
				}
			}

			if( !status[i] )//如果count个点中某个点的状态为0，则不进行下面的绘图显示，跳出循环，也就是取消一个点
				continue;

			points[1][k++] = points[1][i];

			cvCircle( image, cvPointFrom32f(points[1][i]), 10, CV_RGB(0,255,0), -1, 8,0);

		}
		count = k;//统计出当前剩余的点的总数
	}

	if( add_remove_pt && count < MAX_COUNT )//增加点,这段只能放在else if( count > 0 )这段下面，因为需要通过上面的运行决定是否要增加点，鼠标点击的代码相当于运行在每次循环开始前
	{
		points[1][count++] = cvPointTo32f(pt);
		cvFindCornerSubPix( grey, points[1] + count - 1, 1,cvSize(win_size,win_size), cvSize(-1,-1),cvTermCriteria(CV_TERMCRIT_ITER|CV_TERMCRIT_EPS,20,0.03));
		add_remove_pt = 0;
	}


	CV_SWAP( prev_grey, grey, swap_temp );
	CV_SWAP( prev_pyramid, pyramid, swap_temp );
	CV_SWAP( points[0], points[1], swap_points );//将当前的数据放入之前的数据存储中

///////////////////////////////////////////////////
	cvShowImage(" ", image );////显示image

	int c = cvWaitKey(10);
	if( c == 27 )
		break;
	switch( c )
	{
	case 'r':
		need_to_init = 1;
		break;
	case 'c':
		count = 0;
		break;
	case 'n':
		night_mode ^= 1;
		break;
	}
/////////////////////////////////////////////

}

cvReleaseCapture( &capture );
cvDestroyWindow(" ");